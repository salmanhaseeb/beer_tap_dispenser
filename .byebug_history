c
remaining
n
c
n
c
remaining
n
(liters_poured * 1000)
@dispenser.remaining_volume
n
calculate_total_liters_poured
n
c
n
c
@dispenser.remaining
@dispenser.remiaing
@dispenser
remaining.zero?
c
@dispenser
c
@dispenser
n
@dispenser.events.last.event_type == 'open'
c
n
c
@dispenserc
@dispenser
c
n
c
n
c
@dispenser.remaining_volume.zero?
@dispenser.remaining_volume
@dispenser
@dispenser.update(remaining_volume: 0)
n
c
n
c
@dispenser[:errors]
c
@dispenser[:errors].first == "Dispenser is already open!"
@dispenser[:errors] == ["Dispenser is already open!"]
@dispenser[:errors] == "Dispenser is already open!"
@dispenser[:errors]
@dispenser.class
@dispenser
@dispenser.errors
@dispenser = DispenserService.new(@dispenser).start_pouring
DispenserService.new(@dispenser).start_pouring
c
n
c
data['errors']
data{errors}
data[errors]
errors
{errors}
errors[0]
n
DispenserService.new(@dispenser).start_pouring
c
cc
c
n
@dispenser.events.where(event_type: 'open').last.event_time
c
@dispenser.events
c
@dispenser.events
c
@dispenser.events.last.event_type == 'open'
@dispenser.events
@dispenser
c
data
c
data
c
@dispensers
c
@dispensers1
@dispens1
c
@dispensers1
c
@dispensers1
c
@dispensers1
@dispensers!
c
@dispensers
c
@dispensers.events
@dispensers
c
@dispensers
@dispensers.events
c
@dispensers.events
@dispensers
c
@dispensers
c
n
c
@dispensers
c
Dispenser.event
Dispenser.last 
Dispenser
Dispenser.last
dispensers
c
@dispenser
c
dispensers
c
dispensers.events
dispensers
c
dispensers.events
dispensers.event
dispensers
c
n
@dispenser
@dispenser.events
c
dispensers.events
dispensers
c
dispensers.events
dispensers.event
dispensers
c
data
c
          expect(data['dispenser']['error']).to eq('Dispenser is calready closed.')
          expect(data['dispenser']['error']).to eq('Dispenser is already closed.')
expect(data['dispenser']).to_not be_present
=> 72:           expect(data['dispenser']).to_not be_present
expect(data['dispenser']).to_not be_present
=> 72:           expect(data['dispenser']).to_not be_present
c
data
c
data['dispenser']
data
dispenser
c
@dispenser_action.id
c
params 
c
@dispenser_action.id
c
params
c
params
c
params
c
@dispenser_action.id
c
params
c
@dispenser_action.id
        let(:allergy) { {allergy_name: "profile allergy edit"} }
c
params
c
params[:status]
params
c
params['status']
params[status]
params 
c
params
c
params
c
@dispenser_action.id
c
@dispenser_action.id
c
@dispenser
@dispenser_action
@dispenser_Action
c
dispenser[:errors]
dispenser_action[:errors]
dispenser.message
dispenser
message
messahe
data
@response.error
@response.message
@response
reponse
c
@dispenser.events
@dispenser
c
data['error_messages']
data['error_message']
data['message']
data[message
data
data['dispenser_action']
data['dispenser_Action']
data['dispenser']
data['dispenser'][error
data['dispenser']
data['dispenser']['message']
data['dispenser']
data = JSON.parse(response.bod
=> 58:           data = JSON.parse(response.body)
c
response.body
data
c
@dispenser
@dispenser_action
@dispenser_Action
c
@dispenser_action
@dispenser
c
@dispenser
@dispenser_action
        byebug
c
dispenser
response
id
c
dispenser.id
dispenser
data["id"]
data
c
C
data
data["dispenser"]
data[dispensers]
data[dispenser]
data[dispensers]
data["dispensers"]
